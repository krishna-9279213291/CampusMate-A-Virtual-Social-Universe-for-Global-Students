ðŸ’¡ Where to Implement Error Handling in CampusMate?
Area	Possible Errors	Handling Strategy
Signup/Login	Empty fields, wrong passwords, server errors	Client-side + server-side validation + try/catch
Forms (Profile/Colleges)	Missing info, invalid formats	Input validation + error messages
Database (MongoDB)	Connection failure, query failure	Try/catch in async DB calls
API Requests (Fetch/Axios)	Network error, 404, 500	Use .catch() and display user-friendly alerts
Search/Filters	No results, invalid queries	"No results found" message
Uploads (Image/Video)	Large files, unsupported types	File size/type validation

âœ… Step-by-Step: Error Handling in Frontend (HTML/JS)
1. Form Validation Example (Signup)
javascript
Copy code
document.querySelector("form").addEventListener("submit", function (e) {
  e.preventDefault();
  
  const email = document.querySelector("input[type='email']").value;
  const password = document.querySelector("input[type='password']").value;

  if (!email || !password) {
    alert("Please fill in all required fields.");
    return;
  }

  // Password length check
  if (password.length < 6) {
    alert("Password must be at least 6 characters.");
    return;
  }

  // If everything is fine
  console.log("Form is valid. Submitting...");
});
âœ… Step-by-Step: Error Handling in Backend (Node.js)
2. Signup API Example
js
Copy code
app.post('/signup', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Check if fields are empty
    if (!email || !password) {
      return res.status(400).json({ error: 'All fields are required' });
    }

    // Check password strength
    if (password.length < 6) {
      return res.status(400).json({ error: 'Password too short' });
    }

    // Check if email already exists
    const userExists = await User.findOne({ email });
    if (userExists) {
      return res.status(409).json({ error: 'User already exists' });
    }

    // Save user
    const user = new User({ email, password });
    await user.save();

    res.status(201).json({ message: 'Signup successful' });

  } catch (err) {
    console.error("Signup error:", err.message);
    res.status(500).json({ error: 'Server error' });
  }
});
âœ… UI Feedback for Errors
Add <div class="error-message">...</div> below forms and update it via JavaScript.

css
Copy code
.error-message {
  color: red;
  margin-top: 10px;
  font-size: 0.9rem;
}
js
Copy code
document.querySelector(".error-message").textContent = "Email already in use!";
âœ… Best Practices for Robustness
âœ… Use input types (e.g., type="email") for browser validation.

âœ… Never trust frontend only â€” validate again in backend.

âœ… Wrap all backend operations in try/catch.

âœ… Use .catch() in all frontend fetch() or axios calls.

âœ… Show friendly messages, not system errors.

